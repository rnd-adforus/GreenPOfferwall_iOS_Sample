// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -enable-bare-slash-regex -module-name GreenpOfferwall
import AdSupport
import Alamofire
import AppTrackingTransparency
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Flutter
import Foundation
@_exported import GreenpOfferwall
import Kingfisher
import MessageUI
import SnapKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class GreenpFlutter {
  public var flutterResult: Flutter.FlutterResult?
  public init(flutterEngine: Flutter.FlutterEngine)
  public func setController(_ controller: UIKit.UIViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public protocol GreenPDelegate : AnyObject {
  func greenPSettingsDidEnd(with message: Swift.String)
}
open class GreenPSettings {
  public init(delegate: any GreenpOfferwall.GreenPDelegate)
  public func set(appCode: Swift.String, userID: Swift.String)
  public func setAppUniqKey(key: Swift.String)
  public func setAuthMessage(msg: Swift.String)
  public func show(on viewController: UIKit.UIViewController)
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public class func getMostTopViewController(base: UIKit.UIViewController? = nil) -> UIKit.UIViewController?
}
